@page "/todo-template/create-project"
@page "/admin-panel/create-project"
@page "/templates/create-project"
@inherits AppComponentBase

<PageOutlet Url="templates/create-project"
            Title="Create project - Templates"
            Description="create project of the project templates of the bit platform" />

<div class="page-container">

    <BitTypography Variant="BitTypographyVariant.H3" Gutter>Create Project</BitTypography>
    <br />
    <BitTypography Variant="BitTypographyVariant.Subtitle1" Gutter>
        Let's make our next web project a success with Bit.Boilerplate.
    </BitTypography>
    <br />
    <br />
    <CodeBox>
        @GetFinalCommand()
    </CodeBox>
    <br />
    <br />

    <BitGrid Columns="2"
             VerticalSpacing="@($"{verticalSpacing}rem")"
             HorizontalSpacing="@($"{horizontalSpacing}rem")">
        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Name</BitTypography>
                <BitTextField IsRequired @bind-Value="@name" Placeholder="Enter a name" MaxLength="60" Immediate DebounceTime="300" />
            </div>
            <br />
            <CodeBox>
                @GetNameCommand()
            </CodeBox>
            <br />
            It is required to specify a name for your project.
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>CAPTCHA</BitTypography>
                <BitDropdown Placeholder="Choose captcha" Items="@captcha.Items" @bind-Value="@captcha.Selected" />
            </div>
            <div class="default-txt">Default: None</div>
            <br />
            <CodeBox>
                @GetCaptchaCommand()
            </CodeBox>
            <br />
            <div>
                To enhance the security of your website, consider implementing a CAPTCHA solution.
                For example, refer to the Todo <a href="https://todo.bitplatform.dev/sign-up" target="_blank">sign-up</a> page.
            </div>
            @if (captcha.Details.TryGetValue(captcha.Selected, out var captchaValue))
            {
                @if (captchaValue.Text is not null)
                {
                    <br />
                    <div>
                        @captchaValue.Text
                    </div>
                    @if (captchaValue.Reference is not null)
                    {
                        <br />
                        <div>
                            See further details <a href="https://www.google.com/recaptcha/about/" target="_blank">here</a>.
                        </div>
                    }
                }
            }
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Pipeline</BitTypography>
                <BitDropdown Placeholder="Choose pipeline" Items="@pipeline.Items" @bind-Value="@pipeline.Selected" />
            </div>
            <div class="default-txt">Default: GitHub</div>
            <br />
            <CodeBox>
                @GetPipelineCommand()
            </CodeBox>
            <br />
            Ensure a rapid and reliable deployment by utilizing a pipeline.
            @if (pipeline.Details.TryGetValue(pipeline.Selected, out var pipelineValue))
            {
                <br />
                <br />
                <div>
                    If you specify @pipelineValue.Command, CI/ CD pipelines will be set up using <a href=@pipelineValue.Reference target="_blank">@pipelineValue.Text</a>.
                </div>
            }
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Sample</BitTypography>
                <BitDropdown Placeholder="Choose sample" Items="@sample.Items" @bind-Value="@sample.Selected" />
            </div>
            <div class="default-txt">Default: None</div>
            <br />
            <CodeBox>
                @GetSampleCommand()
            </CodeBox>
            To initialize the project with sample code, use the --sample parameter.
            @if (sample.Details.TryGetValue(sample.Selected, out var sampleValue))
            {
                @if (sampleValue.Reference is not null)
                {
                    <br />
                    <br />
                    <div>
                        By setting this parameter to <a href=@sampleValue.Reference target="_blank">@sample.Selected</a>, a sample code will be included.
                    </div>
                }
            }
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Windows</BitTypography>
                <BitToggle @bind-Value="windows.SelectedBoolean" OnText="true" OffText="false" />
            </div>
            <div class="default-txt">Default: True</div>
            <br />
            <CodeBox>
                @GetWindowsCommand()
            </CodeBox>
            If you set the windows parameter to false, the Maui project will still be created,
            but no separate Windows application will be included.
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>App Center</BitTypography>
                <BitToggle @bind-Value="appCenter.SelectedBoolean" OnText="true" OffText="false" />
            </div>
            <div class="default-txt">Default: false</div>
            <br />
            <CodeBox>
                @GetAppCenterCommand()
            </CodeBox>
            By adding the --appCenter true parameter to the dotnet new command, App Center will be integrated for macOS,
            Windows, iOS, and Android platforms.
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>AppInsights</BitTypography>
                <BitToggle @bind-Value="appInsight.SelectedBoolean" OnText="true" OffText="false" />
            </div>
            <div class="default-txt">Default: false</div>
            <br />
            <CodeBox>
                @GetAppInsightsCommand()
            </CodeBox>
            To enable Azure Application Insights for both server and client-side applications (including web),
            set the appinsights parameter to true. This option will configure the application to store logs such as
            errors and informational messages.
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Offline Database</BitTypography>
                <BitToggle @bind-Value="offlineDb.SelectedBoolean" OnText="true" OffText="false" />
            </div>
            <div class="default-txt">Default: false</div>
            <br />
            <CodeBox>
                @GetOfflineDbCommand()
            </CodeBox>
            Setting this parameter to True enables SQLite and Entity Framework Core,
            allowing for the development of an offline-capable web application. This feature, in conjunction with Progressive
            Web App (PWA) capabilities, supports functionality within a browser environment.
            <br />
            <br />
            Note: It is advisable to use this option only when necessary, as integrating Entity Framework Core can increase application size and potentially reduce performance.
        </BitGridItem>

        <BitGridItem Class="grid-item" ColumnSpan="2">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Database</BitTypography>
                <BitDropdown Placeholder="Choose database" Items="@database.Items" @bind-Value="@database.Selected" />
            </div>
            <div class="default-txt">Default: SqlServer</div>
            <br />
            <CodeBox>
                @GetDatabaseCommand()
            </CodeBox>
            The API project requires an Entity Framework Core DbContext for tables such as ASP.NET Core Identity.
            Therefore, we support only those databases commonly used by .NET developers with Entity Framework Core.
            <br />
            <br />
            Supported options include SqlServer, PostgreSQL, MySQL, Cosmos, and Other.
            If you require a database not listed among the options, select Other. After project initialization, you can add the desired <a href="https://learn.microsoft.com/en-us/ef/core/providers/" target="_blank">database</a>
            package and configure it in the AddDbContextPool method, which is located in the Program.Services.cs file within the Server.Api project.
            <br />
            <br />
            @if (database.Details.TryGetValue(database.Selected, out var databaseValue))
            {
                <div>
                    Download and install @database.Selected <a href="@databaseValue.Reference">here</a>.
                    @if (databaseValue.Command is not null)
                    {
                        <div>
                            Alternatively, use the following command:
                            <br />
                            <CodeBox>
                                @databaseValue.Command
                            </CodeBox>
                        </div>
                    }
                    @if (databaseValue.Text is not null)
                    {
                        <div>
                            @databaseValue.Text
                        </div>
                    }
                </div>
            }
        </BitGridItem>

        <BitGridItem Class="grid-item" ColumnSpan="2">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>API</BitTypography>
                <BitDropdown Placeholder="Choose api" Items="@api.Items" @bind-Value="@api.Selected" />
            </div>
            <div class="default-txt">Default: Integrated</div>
            <br />
            <CodeBox>
                @GetApiCommand()
            </CodeBox>
            Select the API mode that best aligns with your specific requirements.
            <br />
            <br />
            @if (api.Details.TryGetValue(api.Selected, out var apiValue))
            {
                @if (apiValue.Text is not null)
                {
                    <div>
                        @apiValue.Text
                    </div>
                }
                @if (apiValue.Image is not null)
                {
                    <br />
                    <br />
                    <div class="api-image-container">
                        <img class="image" src="images/templates/@apiValue.Image" />
                    </div>
                }
            }


        </BitGridItem>
    </BitGrid>
    <br />
    <br />
    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Visual Studio</BitTypography>
        <br />
        <BitCarousel Style="height:unset;aspect-ratio:1/.55" AutoPlay=true InfiniteScrolling=true AutoPlayInterval="3000">
            <BitCarouselItem>
                <div class="image-container">
                    <img src="images/templates/create-new-project-vs-1.webp">
                </div>
            </BitCarouselItem>
            <BitCarouselItem>
                <div class="image-container">
                    <img src="images/templates/create-new-project-vs-2.webp" />
                </div>
            </BitCarouselItem>
            <BitCarouselItem>
                <div class="image-container">
                    <img src="images/templates/create-new-project-vs-3.webp" />
                </div>
            </BitCarouselItem>
        </BitCarousel>
        <br />
        <div class="section-card-txt">
            <b>Note</b>: In second window of create new project modal, make sure to check <b>Place solution and project in the same directory</b> checkbox.
        </div>
    </section>
</div>

<NavigationButtons Prev="Project structure" PrevUrl="/templates/project-structure" Next="Database" NextUrl="/templates/database" />
