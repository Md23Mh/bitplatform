@page "/todo-template/create-project"
@page "/admin-panel/create-project"
@page "/templates/create-project"
@inherits AppComponentBase

<PageOutlet Url="templates/create-project"
            Title="Create project - Templates"
            Description="create project of the project templates of the bit platform" />

<div class="page-container">

    <BitTypography Variant="BitTypographyVariant.H3" Gutter>Create Project</BitTypography>
    <br />
    <BitTypography Variant="BitTypographyVariant.Subtitle1" Gutter>
        Let's make our next cross platform project a success with Bit.Boilerplate.
    </BitTypography>
    <br />
    <br />
    <CodeBox>
        @GetFinalCommand()
    </CodeBox>
    <br />
    <br />

    <BitGrid Columns="2"
             VerticalSpacing="1rem"
             HorizontalSpacing="1rem">
        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Name</BitTypography>
                <BitTextField IsRequired @bind-Value="@name" Placeholder="Enter a name" MaxLength="60" Immediate DebounceTime="300" />
            </div>
            <br />
            <CodeBox>
                @GetNameCommand()
            </CodeBox>
            <br />
            It is required to specify a name for your project.
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Captcha</BitTypography>
                <BitDropdown Placeholder="Choose captcha" Items="@captcha.Items" @bind-Value="@captcha.Value" />
            </div>
            <br />
            <CodeBox>
                @GetCaptchaCommand()
            </CodeBox>
            <br />
            <div>
                @if (captcha.Value == "None")
                {
                    <div>
                        By setting this parameter to None, CAPTCHA will be disabled for your application.
                    </div>
                }
                else
                {
                    <div>
                        To integrate Google <a href="https://www.google.com/recaptcha/about/" target="_blank">reCAPTCHA</a> into
                        the Sign Up page, include --captcha reCaptcha in the dotnet new command.
                    </div>
                }
            </div>
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Pipeline</BitTypography>
                <BitDropdown Placeholder="Choose pipeline" Items="@pipeline.Items" @bind-Value="@pipeline.Value" />
            </div>
            <br />
            <CodeBox>
                @GetPipelineCommand()
            </CodeBox>
            <br />
            Ensure a rapid and reliable deployment by utilizing a pipeline.
            @switch (pipeline.Value)
            {
                case "None":
                    <div>
                        By selecting None, no CI/CD pipeline will be added.
                    </div>
                    break;
                case "GitHub":
                    <div>
                        By selecting GitHub, CI/ CD pipelines will be set up using <a href="https://github.com/features/actions" target="_blank">Github Actions</a>.
                    </div>
                    break;
                case "Azure":
                    <div>
                        By selecting Azure, CI/ CD pipelines will be set up using <a href="https://azure.microsoft.com/en-us/products/devops/pipelines" target="_blank">Azure Devops</a>.
                    </div>
                    break;
            }
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Sample</BitTypography>
                <BitDropdown Placeholder="Choose sample" Items="@sample.Items" @bind-Value="@sample.Value" />
            </div>
            <br />
            <CodeBox>
                @GetSampleCommand()
            </CodeBox>
            Use this parameter to initialize the project with a sample code. 
            The two available options are <a href="https://adminpanel.bitplatform.dev/" target="_blank">Admin Panel</a> and <a href="https://todo.bitplatform.dev/" target="_blank">Todo</a>."
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Windows</BitTypography>
                <BitToggle @bind-Value="windows.Value" OnText="true" OffText="false" />
            </div>
            <br />
            <CodeBox>
                @GetWindowsCommand()
            </CodeBox>
            If you set the windows parameter to false, the Maui project will still be created,
            but no separate Windows application will be included.
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>App Center</BitTypography>
                <BitToggle @bind-Value="appCenter.Value" OnText="true" OffText="false" />
            </div>
            <br />
            <CodeBox>
                @GetAppCenterCommand()
            </CodeBox>
            By adding the --appCenter true parameter to the dotnet new command, App Center will be integrated for macOS,
            Windows, iOS, and Android platforms.
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>AppInsights</BitTypography>
                <BitToggle @bind-Value="appInsight.Value" OnText="true" OffText="false" />
            </div>
            <br />
            <CodeBox>
                @GetAppInsightsCommand()
            </CodeBox>
            To enable Azure Application Insights for both server and client-side applications (including web),
            set the appinsights parameter to true. This option will configure the application to store logs such as
            errors and informational messages.
        </BitGridItem>

        <BitGridItem Class="grid-item">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Offline Database</BitTypography>
                <BitToggle @bind-Value="offlineDb.Value" OnText="true" OffText="false" />
            </div>
            <br />
            <CodeBox>
                @GetOfflineDbCommand()
            </CodeBox>
            Setting this parameter to True enables SQLite and Entity Framework Core,
            allowing for the development of an offline-capable web application. This feature, in conjunction with Progressive
            Web App (PWA) capabilities, supports functionality within a browser environment.
            <br />
            <br />
            Note: It is advisable to use this option only when necessary, as integrating Entity Framework Core can increase application size and potentially reduce performance.
        </BitGridItem>

        <BitGridItem Class="grid-item" ColumnSpan="2">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>Database</BitTypography>
                <BitDropdown Placeholder="Choose database" Items="@database.Items" @bind-Value="@database.Value" />
            </div>
            <br />
            <CodeBox>
                @GetDatabaseCommand()
            </CodeBox>
            The API project requires an Entity Framework Core DbContext for tables such as ASP.NET Core Identity.
            Therefore, we support only those databases commonly used by .NET developers with Entity Framework Core.
            <br />
            <br />
            Supported options include SqlServer, PostgreSQL, MySQL, Cosmos, and Other.
            If you require a database not listed among the options, select Other. After project initialization, you can add the desired <a href="https://learn.microsoft.com/en-us/ef/core/providers/" target="_blank">database</a>
            package and configure it in the AddDbContextPool method, which is located in the Program.Services.cs file within the Server.Api project.
            <br />
            <br />
            @switch(database.Value)
            {
                case "Sqlite":
                <div>
                    Download and install @database.Value <a href="https://www.sqlite.org/download.html" target="_blank">here</a>.
                </div>
                    break;
                case "SqlServer":
                <div>
                    Download and install @database.Value <a href="https://learn.microsoft.com/en-us/sql/database-engine/configure-windows/sql-server-express-localdb" target="_blank">here</a>.
                    LocalDB is installed by default along with Visual Studio.
                </div>
                    break;
                case "PostgreSQL":
                <div>
                    Download and install @database.Value <a href="https://www.postgresql.org/download/" target="_blank">here</a>.
                    Alternatively, use the following command:
                    <br />
                    <CodeBox>
winget install --id=PostgreSQL.PostgreSQL.14
                    </CodeBox>
                </div>
                    break;
                case "MySQL":
                <div>
                    Download and install @database.Value <a href="https://mariadb.org/download" target="_blank">here</a>.
                    Maria db is supported as well.
                </div>
                    break;
                case "Cosmos":
                <div>
                    Download and install @database.Value <a href="https://learn.microsoft.com/en-us/azure/cosmos-db/how-to-develop-emulator?tabs=windows%2Ccsharp&pivots=api-nosql" target="_blank">here</a>.
                    Alternatively, use the following command:
                    <br />
                    <CodeBox>
winget install -e --id Microsoft.Azure.CosmosEmulator
                    </CodeBox>
                </div>
                    break;
                case "Other":
                    break;
            }
        </BitGridItem>

        <BitGridItem Class="grid-item" ColumnSpan="2">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>API</BitTypography>
                <BitDropdown Placeholder="Choose api" Items="@api.Items" @bind-Value="@api.Value" />
            </div>
            <br />
            <CodeBox>
                @GetApiCommand()
            </CodeBox>
            Select the API mode that best aligns with your specific requirements.
            <br />
            <br />
            @if(api.Value == "Integrated")
            {
                 <div>
                   If this parameter is set to Integrated, the Server.Web project will encompass all features of the Api project, 
                   hence provides options for various modes such as Blazor Auto, Blazor Server, pre-rendering, and static SSR.
                 </div>
                 <br />
                 <br />
                 <div class="api-image-container">
                    <img class="image" src="images/templates/api-integrated.webp" />
                 </div>   
            }
            else
            {
                <div>
                  Conversely, if the parameter is set to Standalone, you will need to separately run and publish both the Server.Api and Server.Web projects.
                </div>
                <br />
                <br />
                <div class="api-image-container">
                    <img class="image" src="images/templates/api-standalone.webp" />
                </div>   
            }
            
        </BitGridItem>

        <BitGridItem Class="grid-item" ColumnSpan="2">
            <div class="row">
                <BitTypography Variant="BitTypographyVariant.H6" Gutter>File Storage</BitTypography>
                <BitDropdown Placeholder="Choose file storage" Items="@fileStorage.Items" @bind-Value="@fileStorage.Value" />
            </div>
                <CodeBox>
                    @GetFileStorageCommand()
                </CodeBox>

            The API project includes an Attachment Controller responsible for handling user images,
            including resizing and saving them in the WebP format. The <a href="https://github.com/robinrodricks/FluentStorage" target="_blank">FluentStorage</a> project is utilized for file storage,
            and various implementations of this project can be applied.
            <br />
            <br />
            Notably, one implementation is FluentStorage.AWS, which supports Amazon S3.
            This allows you to use any file storage solution compatible with S3, such as DigitalOcean Spaces.
            <br />
            <br />
            To configure file storage to use your local hard drive, use the Local value. Other available options include
            AzureBlobStorage and Other. If you choose Other, you may select any FluentStorage package of your preference.
            <br />
            <br />
            @if(fileStorage.Value == "AzureBlobStorage")
            {
                <div>
                    Download and install @fileStorage.Value <a href="https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite?tabs=npm%2Cblob-storage#install-azurite">here</a>.
                </div>
            }
        </BitGridItem>
    </BitGrid>
    <br />
    <br />
    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Visual Studio</BitTypography>
        <br />
        <BitCarousel Style="height:unset;aspect-ratio:1/.55" AutoPlay=true InfiniteScrolling=true AutoPlayInterval="3000">
            <BitCarouselItem>
                <div class="image-container">
                    <img src="images/templates/create-new-project-vs-1.webp">
                </div>
            </BitCarouselItem>
            <BitCarouselItem>
                <div class="image-container">
                    <img src="images/templates/create-new-project-vs-2.webp" />
                </div>
            </BitCarouselItem>
            <BitCarouselItem>
                <div class="image-container">
                    <img src="images/templates/create-new-project-vs-3.webp" />
                </div>
            </BitCarouselItem>
        </BitCarousel>
        <br />
        <div class="section-card-txt">
            <b>Note</b>: In second window of create new project modal, make sure to check <b>Place solution and project in the same directory</b> checkbox.
        </div>
    </section>
</div>

<NavigationButtons Prev="Project structure" PrevUrl="/templates/project-structure" Next="Database" NextUrl="/templates/database" />
